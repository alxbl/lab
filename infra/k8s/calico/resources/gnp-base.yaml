# Deny all traffic from outside to Services and Pods other than kubeapi-server and istio-ingress
apiVersion: projectcalico.org/v3
kind: GlobalNetworkPolicy
metadata:
  name: pods-allow-nothing-except-dns
spec:
  namespaceSelector: has(kubernetes.io/metadata.name) && kubernetes.io/metadata.name not in {"system", "kube-system", "istio-system"}
  types:
  - Ingress
  - Egress
  egress:
    # Allow all namespaces to communicate with CoreDNS 
    - action: Allow
      protocol: UDP
      destination:
        selector: 'k8s-app == "coredns"'
        ports:
        - 53
    - action: Allow
      protocol: TCP
      destination:
        selector: 'k8s-app == "coredns"'
        ports:
        - 53
  # ingress: deny all inbound traffic
---
# TCP: 22 (SSH), 179 (BGP)
apiVersion: projectcalico.org/v3
kind: GlobalNetworkPolicy
metadata:
  name: host-allow-management-worker
spec:
  selector: "type == 'endpoint'"
  order: 0
  types:
  - Ingress
  - Egress
  ingress:
    # Allow BGP traffic
    - action: Allow
      protocol: TCP
      source:
        nets:
          - '10.0.0.0/16'
      destination:
        ports: [179]
    - action: Allow
      protocol: TCP
      source:
        nets:
          - '10.0.0.0/16' # TODO: Management Net
      destination:
        ports: [22]
  egress:
    # Allow HTTPS, DNS traffic out from host
    - action: Allow
      protocol: TCP
      destination:
        ports: [53, 80, 443]
    # Allow DNS, DHCP from host
    - action: Allow
      protocol: UDP
      destination:
        nets:
          - '0.0.0.0/0'
        ports: [53, 67]
---
# TCP: 2379-2380 (etcd), 6443 (kube-apiserver)
# https://kubernetes.io/docs/reference/networking/ports-and-protocols/
apiVersion: projectcalico.org/v3
kind: GlobalNetworkPolicy
metadata:
  name: host-allow-management-controller
spec:
  selector: "type == 'endpoint' && role == 'k8s-controller'"
  types:
  - Ingress
  order: 0
  ingress:
    # Allow etcd traffic
    - action: Allow
      protocol: TCP
      source:
        nets:
          # FIXME: k8s control-plane CIDR (Better: can check source host labels?)
          - '10.0.0.0/16'
      destination:
        ports: [2379, 2380]
    # Allow kube-apiserver traffic
    - action: Allow
      protocol: TCP
      source:
        nets:
          - '10.0.0.0/16'
      destination:
        ports: [6443]