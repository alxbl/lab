# proxyDHCP that offers net booting, this configuration relies
# on another DHCP server assigning IP addresses and an available DNS server.

log-queries
log-dhcp
no-daemon

# Might need to bind a specific interface if systemd-resolved is running.
# interface=wlp2s0
# bind-dynamic

# My LAN is 10.0.0.0/16
dhcp-range=10.0.0.0,proxy,255.255.0.0
dhcp-lease-max=1000
dhcp-no-override # Avoid problems with old or broken clients.
strict-order # https://www.redhat.com/archives/libvir-list/2010-March/msg00038.html

enable-tftp
tftp-root=/var/lib/tftpboot

###
# MULTIARCH NETBOOT CONFIG
###

# Set iPXE tag as early as possible to prevent undi loops.
dhcp-userclass=set:ipxe,iPXE

# Legacy PXE: Chainload to iPXE with undionly.pxe
# dhcp-vendorclass=set:bios,PXEClient:Arch:00000:UNDI:002001 # NO
dhcp-match=set:bios,option:client-arch,0
dhcp-boot=tag:!ipxe,tag:bios,undionly.kpxe

# PXE Chainload to iPXE / RPI4 Net Boot
# HACK: RPI doesn't care about the filename here, it only checks if an entry called
# "Raspberry Pi Boot" exists. so naming the PXE (and default) entry will let both clients boot:
#  - RPI4 will proceed with its regular TFTP network boot flow
#  - UNDI PXE firmwares will grab undionly.kpxe and chainload to iPXE
# Both RPI4 and Intel UNDI PXE send a client-arch of 0.
pxe-service=tag:!ipxe,0,"Raspberry Pi Boot",undionly.kpxe

# RPI4 UEFI to iPXE chainload (client-arch 11 == ARM64)
dhcp-match=set:rpi4,option:client-arch,11
dhcp-boot=tag:!ipxe,tag:rpi4,ipxe-arm64.efi

# UEFI to iPXE (x86)
dhcp-match=set:efi32,option:client-arch,6
dhcp-match=set:efibc,option:client-arch,7
dhcp-match=set:efi64,option:client-arch,9

dhcp-boot=tag:efi32,ipxe.efi
dhcp-boot=tag:efibc,ipxe.efi
dhcp-boot=tag:efi64,ipxe.efi

# iPXE clients: Go to Matchbox server
dhcp-boot=tag:ipxe,http://th1nk.lan:8080/boot.ipxe

